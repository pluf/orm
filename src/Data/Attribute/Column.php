<?php
/*
 * This file is part of Pluf Framework, a simple PHP Application Framework.
 * Copyright (C) 2010-2020 Phoinex Scholars Co. (http://dpq.co.ir)
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program. If not, see <http://www.gnu.org/licenses/>.
 */
namespace Pluf\Data\Attribute;

use Attribute;

/**
 * Is used to specify the mapped column for a persistent property or field. 
 * 
 * If no Column annotation is specified, the default values apply.
 * 
 * ```php
 * #[Column(name:"DESC", nullable:false, length:512)]
 * public function getDescription():string 
 * { 
 *  return $this->description; 
 * }
 * ```
 * 
 * And the other example:
 * 
 * ```php
 * #[Column(
 *      name:"DESC",
 *      columnDefinition:"CLOB NOT NULL",
 *      table:"EMP_DETAIL"
 * )]
 * #[Lob]
 * public function getDescription():string
 * { 
 *  return $this->description; 
 * }
 * ```
 * 
 * New example:
 * 
 * ```php
 * #[Column(name:"ORDER_COST", updatable:false, precision:12, scale:2)]
 * public function getCost(): int
 * {
 *  return $this->cost; 
 * }
 * ```
 */
#[Attribute(Attribute::TARGET_METHOD|Attribute::TARGET_PROPERTY)]
class Column
{

    /**
     * The SQL fragment that is used when generating the DDL for the column.
     * 
     * Defaults to the generated SQL to create a column of the inferred type.
     * 
     * @var string
     */
    public ?string $columnDefinition;

    /**
     * Whether the column is included in SQL INSERT statements generated by the persistence provider.
     *  
     * @var bool
     */
    public ?bool $insertable;

    /**
     * The column length. (Applies only if a string-valued column is used.)
     * 
     * @var int
     */
    public ?int $length;

    /**
     * The name of the column.
     *
     * Defaults to the property or field name.
     *
     * @var string
     */
    public ?string $name;

    /**
     * Whether the database column is nullable.
     * 
     * @var bool
     */
    public ?bool $nullable;

    /**
     * The precision for a decimal (exact numeric) column. (Applies only if a decimal column is used.) 
     * 
     * Value must be set by developer if used when generating the DDL for the column.
     * 
     * @var int
     */
    public ?int $precision;

    /**
     * The scale for a decimal (exact numeric) column. (Applies only if a decimal column is used.)
     * 
     * @var int
     */
    public ?int $scale;

    /**
     * The name of the table that contains the column. If absent the column is assumed to be in the primary table.
     * 
     * @var string
     */
    public ?string $table;

    /**
     * Whether the column is a unique key. 
     * 
     * This is a shortcut for the UniqueConstraint annotation at the table level and is useful for when the 
     * unique key constraint corresponds to only a single column. This constraint applies in addition to 
     * any constraint entailed by primary key mapping and to constraints specified at the table level.
     * 
     * @var bool
     */
    public ?bool $unique;

    /**
     * Whether the column is included in SQL UPDATE statements generated by the persistence provider.
     * 
     * @var bool
     */
    public ?bool $updatable;

    public function __construct(?string $name = null, ?string $columnDefinition = null, ?bool $insertable = null, ?int $length = null, ?bool $nullable = null, ?int $precision = null, ?int $scale = null, ?string $table = null, ?bool $unique = null, ?bool $updatable = null)
    {
        $this->name = $name;
        $this->columnDefinition = $columnDefinition;
        $this->insertable = $insertable;
        $this->length = $length;
        $this->name = $name;
        $this->nullable = $nullable;
        $this->precision = $precision;
        $this->scale = $scale;
        $this->table = $table;
        $this->unique = $unique;
        $this->updatable = $updatable;
    }
    
    
    
    /**
     * @return string
     */
    public function getColumnDefinition()
    {
        return $this->columnDefinition;
    }
    
    /**
     * @return boolean
     */
    public function isInsertable()
    {
        return $this->insertable;
    }
    
    /**
     * @return number
     */
    public function getLength()
    {
        return $this->length;
    }
    
    /**
     * @return string
     */
    public function getName()
    {
        return $this->name;
    }
    
    /**
     * @return boolean
     */
    public function isNullable()
    {
        return $this->nullable;
    }
    
    /**
     * @return number
     */
    public function getPrecision()
    {
        return $this->precision;
    }
    
    /**
     * @return number
     */
    public function getScale()
    {
        return $this->scale;
    }
    
    /**
     * @return string
     */
    public function getTable()
    {
        return $this->table;
    }
    
    /**
     * @return boolean
     */
    public function isUnique()
    {
        return $this->unique;
    }
    
    /**
     * @return boolean
     */
    public function isUpdatable()
    {
        return $this->updatable;
    }
}

